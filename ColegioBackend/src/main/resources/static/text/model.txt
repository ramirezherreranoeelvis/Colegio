@Setter
@Getter
@Builder
@Entity
@Table(name = "course")
public class Course {

        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private Integer idCourse;

        @Column(name = "name", nullable = false, length = 50)
        private String name;

}
@Setter
@Getter
@Builder
@Entity
@Table(name = "courseScheduled")
public class CourseScheduled {

        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private Integer idCourseScheduled;

        @ManyToOne
        @JoinColumn(name = "idClassroom", nullable = false)
        private Classroom classroom;

        @ManyToOne
        @JoinColumn(name = "idCourse", nullable = false)
        private Course course;

        @ManyToOne
        @JoinColumn(name = "idTeacher", nullable = false)
        private Teacher teacher;

        @ManyToOne
        @JoinColumn(name = "idEnrollment", nullable = false)
        private Enrollment enrollment;

        @Column(name = "startTime", nullable = false)
        private LocalTime startTime;

        @Column(name = "endTime", nullable = false)
        private LocalTime endTime;

        @Enumerated(EnumType.STRING)
        @Column(name = "day", length = 10, nullable = false, columnDefinition = "VARCHAR(10)")
        private DayOfWeek dayOfWeek;

}
@Setter
@Getter
@Builder
@Entity
@Table(name = "gradeCourseScheduled")
public class GradeCourseScheduled {

        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private Integer idGradeCourseScheduled;

        @ManyToOne
        @JoinColumn(name = "idGradeType", nullable = false)
        private GradeType gradeType;

        @ManyToOne
        @JoinColumn(name = "idCourseScheduled", nullable = false)
        private CourseScheduled courseScheduled;

        @ManyToOne
        @JoinColumn(name = "idStudent", nullable = false)
        private Student student;

        @Column(name = "grade", precision = 4, scale = 2, nullable = false)
        private BigDecimal grade;


}
@Setter
@Getter
@Builder
@Entity
@Table(name = "gradeType")
public class GradeType {

        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private Integer idGradeType;

        @Column(name = "name", nullable = false, length = 20)
        private String name;

}
@Setter
@Getter
@Builder
@Entity
@Table(name = "studentAttendanceCourseScheduled")
public class StudentAttendanceCourseScheduled {

        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private Integer idStudentAttendanceCourseScheduled;

        @ManyToOne
        @JoinColumn(name = "idPerson", nullable = false)
        private Student student;

        @ManyToOne
        @JoinColumn(name = "idCourseScheduled", nullable = false)
        private CourseScheduled courseScheduled;

        @Column(name = "timeEntry", nullable = false)
        @Temporal(TemporalType.TIMESTAMP)
        private Date timeEntry;

        @Column(name = "timeExit")
        @Temporal(TemporalType.TIMESTAMP)
        private Date timeExit;

        @PrePersist
        protected void onCreate() {
                timeEntry = new Date();
        }

}
@Setter
@Getter
@Builder
@Entity
@Table(name = "enrollment")
public class Enrollment {

        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private Integer idEnrollment;

        @ManyToOne
        @JoinColumn(name = "idSeason", nullable = false)
        private Season season;

        @ManyToOne
        @JoinColumn(name = "idGrade", nullable = false)
        private Grade grade;

        @Column(name = "vacancies", nullable = false)
        private Integer vacancies;

        @Column(name = "enrolled", nullable = false)
        private Integer enrolled;

        @Column(name = "cost", nullable = false, precision = 6, scale = 2)
        private BigDecimal cost;

        @Column(name = "monthlyFee", nullable = false, precision = 6, scale = 2)
        private BigDecimal monthlyFee;

        @OneToMany(mappedBy = "enrollment", cascade = CascadeType.ALL, orphanRemoval = true)
        private final List<EnrollmentStudent> enrollmentStudents = new ArrayList<>();

        @OneToMany(mappedBy = "enrollment", cascade = CascadeType.ALL, orphanRemoval = true)
        private final List<CourseScheduled> courseScheduleds = new ArrayList<>();

}
@Setter
@Getter
@Builder
@Entity
@Table(name = "enrollmentStudent")
public class EnrollmentStudent {

        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private Integer idEnrollmentStudent;

        @ManyToOne
        @JoinColumn(name = "idStudent", nullable = false)
        private Student student;

        @ManyToOne
        @JoinColumn(name = "idEnrollment", nullable = false)
        private Enrollment enrollment;

}
@Setter
@Getter
@Builder
@Entity
@Table(name = "payment")
public class Payment {

        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private Integer idPayment;

        @ManyToOne
        @JoinColumn(name = "idEnrollmentStudent", nullable = false)
        private EnrollmentStudent enrollmentStudent;

        @ManyToOne
        @JoinColumn(name = "idTypeStatus", nullable = false)
        private TypeStatus typeStatus;

        @Column(name = "pay", precision = 6, scale = 2)
        private BigDecimal pay;

        @Column(name = "description", length = 50)
        private String description;

}
@Setter
@Getter
@Builder
@Entity
@Table(name = "season")
public class Season {

        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private Integer idSeason;

        @Column(name = "year", nullable = false, updatable = false, unique = true)
        private Date year;


}
@Setter
@Getter
@Builder
@Entity
@Table(name = "typeStatus")
public class TypeStatus {

        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private Integer idTypeStatus;

        @Column(name = "name", nullable = false, length = 20, unique = true)
        private String name;

}
@Setter
@Getter
@Builder
@Entity
@Table(name = "classroom")
public class Classroom {

        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private Integer idClassroom;

        @Column(name = "number", nullable = false, unique = true)
        private int number;

        @Column(name = "floor", nullable = false)
        private int floor;

}
public enum DayOfWeek {

        MONDAY("LUNES"),
        TUESDAY("MARTES"),
        WEDNESDAY("MIERCOLES"),
        THURSDAY("JUEVES"),
        FRIDAY("VIERNES"),
        SATURDAY("SABADO"),
        SUNDAY("DOMINGO");

        private final String displayName;

        DayOfWeek(String displayName) {
                this.displayName = displayName;
        }

        public String getDisplayName() {
                return displayName;
        }
}
@Setter
@Getter
@Builder
@Entity
@Table(name = "entrySchool")
public class EntrySchool {

        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private Integer idEntrySchool;

        @ManyToOne
        @JoinColumn(name = "idPerson", nullable = false, updatable = false)
        private Student student;

        @Column(name = "timeEntry", nullable = false)
        @Temporal(TemporalType.TIMESTAMP)
        private Date timeEntry;

        @Column(name = "timeExit")
        @Temporal(TemporalType.TIMESTAMP)
        private Date timeExit;

        @PrePersist
        protected void onCreate() {
                timeEntry = new Date();
        }

}
@Setter
@Getter
@Builder
@Entity
@Table(name = "grade")
public class Grade {

        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private Integer idGrade;

        @Column(name = "name", nullable = false, unique = true, length = 30)
        private String name;

}
@Setter
@Getter
@Builder
@Entity
@Table(name = "teacherCourseScheduled")
public class TeacherCourseScheduled {

        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private Integer idTeacherCourseScheduled;

        @ManyToOne
        @JoinColumn(name = "idTeacher", nullable = false)
        private Teacher teacher;

        @ManyToOne
        @JoinColumn(name = "idCourseScheduled", nullable = false)
        private CourseScheduled courseScheduled;

        @Column(name = "salary", nullable = false, precision = 6, scale = 2)
        private BigDecimal salary;

}
@Setter
@Getter
@Entity
@NoArgsConstructor
@DiscriminatorValue("assistant")
public class Assistant extends Person {

        @Builder
        public Assistant(Integer idPerson, Integer dni, String name, String surnamePaternal, String surnameMaternal, int phoneNumber, Access access) {
                super(idPerson, dni, name, surnamePaternal, surnameMaternal, phoneNumber, access);
        }

}
@Setter
@Getter
@Entity
@NoArgsConstructor
@DiscriminatorValue("director")
public class Director extends Person {

        @Builder
        public Director(Integer idPerson, Integer dni, String name, String surnamePaternal, String surnameMaternal, int phoneNumber, Access access) {
                super(idPerson, dni, name, surnamePaternal, surnameMaternal, phoneNumber, access);
        }

}
@Setter
@Getter
@Entity
@NoArgsConstructor
@DiscriminatorValue("father")
public class Father extends Person {

        @Builder
        public Father(Integer idPerson, Integer dni, String name, String surnamePaternal, String surnameMaternal, int phoneNumber, Access access) {
                super(idPerson, dni, name, surnamePaternal, surnameMaternal, phoneNumber, access);
        }

}
@Setter
@Getter
@Entity
@NoArgsConstructor
@DiscriminatorValue("mother")
public class Mother extends Person {

        @Builder
        public Mother(Integer idPerson, Integer dni, String name, String surnamePaternal, String surnameMaternal, int phoneNumber, Access access) {
                super(idPerson, dni, name, surnamePaternal, surnameMaternal, phoneNumber, access);
        }

}
@Setter
@Getter
@Entity
@NoArgsConstructor
@AllArgsConstructor
@DiscriminatorColumn(name = "typePerson", discriminatorType = DiscriminatorType.STRING, length = 20)
@Inheritance(strategy = InheritanceType.SINGLE_TABLE)
@Table(name = "person")
public class Person {

        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private Integer idPerson;

        @Dni
        @Column(name = "dni", nullable = false, unique = true, updatable = false)
        private Integer dni;

        @Column(name = "name", nullable = false, length = 250)
        private String name;

        @Column(name = "surnamePaternal", nullable = false, length = 50)
        private String surnamePaternal;

        @Column(name = "surnameMaternal", nullable = false, length = 50)
        private String surnameMaternal;

        @Column(name = "phoneNumber", nullable = false)
        private int phoneNumber;

        @ManyToOne
        @JoinColumn(name = "idAccess", nullable = false, unique = true, updatable = false)
        private Access access;

}
@Setter
@Getter
@Entity
@NoArgsConstructor
@DiscriminatorValue("representative")
public class Representative extends Person {

        @Builder
        public Representative(Integer idPerson, Integer dni, String name, String surnamePaternal, String surnameMaternal, int phoneNumber, Access access) {
                super(idPerson, dni, name, surnamePaternal, surnameMaternal, phoneNumber, access);
        }

}
@Setter
@Getter
@Entity
@NoArgsConstructor
@DiscriminatorValue("student")
public class Student extends Person {

        @ManyToOne
        @JoinColumn(name = "idFather", nullable = false, updatable = false)
        private Father father;

        @ManyToOne
        @JoinColumn(name = "idMother", nullable = false, updatable = false)
        private Mother mother;

        @ManyToOne
        @JoinColumn(name = "idRepresentative", nullable = false)
        private Representative representative;

        @Builder
        public Student(Integer idPerson, Integer dni, String name, String surnamePaternal, String surnameMaternal, int phoneNumber, Access access) {
                super(idPerson, dni, name, surnamePaternal, surnameMaternal, phoneNumber, access);
        }

}
@Setter
@Getter
@Entity
@NoArgsConstructor
@DiscriminatorValue("teacher")
public class Teacher extends Person {

        @Builder
        public Teacher(Integer idPerson, Integer dni, String name, String surnamePaternal, String surnameMaternal, int phoneNumber, Access access) {
                super(idPerson, dni, name, surnamePaternal, surnameMaternal, phoneNumber, access);
        }

}
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
@Setter
@Getter
@Builder
@Entity
@Table(name = "report")
public class Report {

        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private Integer idReport;

        @ManyToOne
        @JoinColumn(name = "idAssistant", nullable = false)
        private Assistant assistant;

        @Column(name = "description", nullable = false, length = 300)
        private String description;

        @Column(name = "dateReport", nullable = false, updatable = false)
        @Temporal(TemporalType.TIMESTAMP)
        private Date dateReport;

        @OneToMany(mappedBy = "report", cascade = CascadeType.ALL, orphanRemoval = true)
        private List<ReportPerson> reportPersons = new ArrayList<>();

        @PrePersist
        protected void onCreate() {
                dateReport = new Date();
        }


}
@Setter
@Getter
@Builder
@Entity
@Table(name = "reportPerson")
public class ReportPerson {

        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private Integer idReportPerson;

        @ManyToOne
        @JoinColumn(name = "idPerson", nullable = false)
        private Person person;

        @ManyToOne
        @JoinColumn(name = "idReport", nullable = false)
        private Report report;

}
